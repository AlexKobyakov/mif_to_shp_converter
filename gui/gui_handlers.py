# -*- coding: utf-8 -*-
"""
Event Handlers for GUI Components
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

Author: –ö–æ–±—è–∫–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á (Alex Kobyakov)
Email: kobyakov@lesburo.ru
Year: 2025
"""

import os
import glob
from datetime import datetime

from qgis.PyQt.QtCore import QThread, Qt
from qgis.PyQt.QtWidgets import QFileDialog, QMessageBox, QTableWidgetItem
from qgis.PyQt.QtGui import QColor

from qgis.core import QgsProject, QgsVectorLayer, QgsCoordinateReferenceSystem


class GuiEventHandlers:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, main_dialog):
        self.dialog = main_dialog
    
    def onLanguageChanged(self, index):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        language_map = {
            0: 'ru',    # –†—É—Å—Å–∫–∏–π
            1: 'en',    # English  
            2: 'zh',    # ‰∏≠Êñá
            3: 'hi',    # ‡§π‡§ø‡§Ç‡§¶‡•Ä
            4: 'es',    # Espa√±ol
            5: 'ar',    # ÿßŸÑÿπÿ±ÿ®Ÿäÿ©
            6: 'fr',    # Fran√ßais
            7: 'pt',    # Portugu√™s
            8: 'de'     # Deutsch
        }
        
        new_language = language_map.get(index, 'ru')
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º translations –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        from ..translations import translations
        translations.set_language(new_language)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.dialog.updateLanguage()
        
        # –î–ª—è RTL —è–∑—ã–∫–æ–≤ (–∞—Ä–∞–±—Å–∫–∏–π)
        if new_language == 'ar':
            self.dialog.setLayoutDirection(Qt.RightToLeft)
        else:
            self.dialog.setLayoutDirection(Qt.LeftToRight)
    
    def showAuthorInfo(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ"""
        from .gui_dialogs import AuthorInfoDialog
        dialog = AuthorInfoDialog(self.dialog)
        dialog.exec_()
    
    def showCrsExamples(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Å–∏—Å—Ç–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        from .gui_dialogs import CrsExamplesDialog
        dialog = CrsExamplesDialog(self.dialog)
        dialog.exec_()
    
    def onModeChanged(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        is_batch = self.dialog.mode_widget.batch_mode.isChecked()
        self.dialog.input_widget.single_widget.setVisible(not is_batch)
        self.dialog.input_widget.batch_widget.setVisible(is_batch)
    
    def selectInputFile(self):
        """–í—ã–±–æ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        from ..translations import translations
        
        filename, _ = QFileDialog.getOpenFileName(
            self.dialog, 
            translations.get_text('select_input_file'), 
            '', 
            translations.get_text('supported_formats')
        )
        if filename:
            self.dialog.input_widget.input_file_line.setText(filename)
            if not self.dialog.output_widget.output_folder_line.text():
                self.dialog.output_widget.output_folder_line.setText(os.path.dirname(filename))
    
    def selectInputFolder(self):
        """–í—ã–±–æ—Ä –≤—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏"""
        from ..translations import translations
        
        folder = QFileDialog.getExistingDirectory(
            self.dialog, 
            translations.get_text('select_input_folder')
        )
        if folder:
            self.dialog.input_widget.input_folder_line.setText(folder)
            if not self.dialog.output_widget.output_folder_line.text():
                self.dialog.output_widget.output_folder_line.setText(folder)
    
    def selectOutputFolder(self):
        """–í—ã–±–æ—Ä –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏"""
        from ..translations import translations
        
        folder = QFileDialog.getExistingDirectory(
            self.dialog, 
            translations.get_text('select_output_folder')
        )
        if folder:
            self.dialog.output_widget.output_folder_line.setText(folder)
    
    def startConversion(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        from ..translations import translations
        from ..worker import ConversionWorker
        from .gui_dialogs import WarningDialog
        
        # –°–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        files_to_process = []
        
        if self.dialog.mode_widget.single_mode.isChecked():
            input_file = self.dialog.input_widget.input_file_line.text()
            if not input_file or not os.path.exists(input_file):
                dialog = WarningDialog('–û—à–∏–±–∫–∞', translations.get_text('error_no_input_file'))
                dialog.exec_()
                return
            files_to_process = [input_file]
        else:
            input_folder = self.dialog.input_widget.input_folder_line.text()
            if not input_folder or not os.path.exists(input_folder):
                dialog = WarningDialog('–û—à–∏–±–∫–∞', translations.get_text('error_no_input_folder'))
                dialog.exec_()
                return
            
            # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ (MIF –∏ TAB)
            mif_pattern = os.path.join(input_folder, '*.mif')
            tab_pattern = os.path.join(input_folder, '*.tab')
            files_to_process = glob.glob(mif_pattern) + glob.glob(tab_pattern)
            
            if not files_to_process:
                dialog = WarningDialog('–û—à–∏–±–∫–∞', translations.get_text('error_no_files_found'))
                dialog.exec_()
                return
        
        output_folder = self.dialog.output_widget.output_folder_line.text()
        if not output_folder:
            dialog = WarningDialog('–û—à–∏–±–∫–∞', translations.get_text('error_no_output_folder'))
            dialog.exec_()
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs(output_folder, exist_ok=True)
        
        crs_text = self.dialog.processing_widget.crs_text.toPlainText().strip()
        if not crs_text:
            dialog = WarningDialog('–û—à–∏–±–∫–∞', translations.get_text('error_no_crs'))
            dialog.exec_()
            return
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        output_format = 'GeoJSON' if 'GeoJSON' in self.dialog.output_widget.output_format_combo.currentText() else 'ESRI Shapefile'
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.dialog.results_table.setRowCount(0)
        self.dialog.log_message(f"üöÄ === {translations.get_text('start_conversion')} {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.dialog.progress_bar.setVisible(True)
        self.dialog.progress_bar.setValue(0)
        self.dialog.control_buttons.convert_button.setEnabled(False)
        self.dialog.control_buttons.convert_button.setText(f"‚è≥ {translations.get_text('converting')}")
        self.dialog.control_buttons.cancel_button.setEnabled(True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞
        max_workers = self.dialog.processing_widget.threads_spinbox.value()
        self.dialog.worker = ConversionWorker(files_to_process, output_folder, crs_text, output_format, max_workers)
        self.dialog.worker_thread = QThread()
        self.dialog.worker.moveToThread(self.dialog.worker_thread)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.dialog.worker_thread.started.connect(self.dialog.worker.run)
        self.dialog.worker.progress.connect(self.dialog.progress_bar.setValue)
        self.dialog.worker.log_message.connect(self.dialog.log_message)
        self.dialog.worker.file_completed.connect(self.onFileCompleted)
        self.dialog.worker.finished.connect(self.onConversionFinished)
        self.dialog.worker.error.connect(self.onConversionError)
        
        # –ó–∞–ø—É—Å–∫
        self.dialog.worker_thread.start()
    
    def cancelConversion(self):
        """–û—Ç–º–µ–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        from ..translations import translations
        
        if self.dialog.worker:
            self.dialog.worker.cancel()
            self.dialog.log_message(f"‚ö†Ô∏è {translations.get_text('conversion_cancelled')}")
    
    def clearLogs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.dialog.log_text.clear()
        self.dialog.results_table.setRowCount(0)
        self.dialog.log_message("üßπ Logs and results cleared")
    
    def onFileCompleted(self, filename, success, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        from ..translations import translations
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É
        row = self.dialog.results_table.rowCount()
        self.dialog.results_table.insertRow(row)
        
        # –§–∞–π–ª
        file_item = QTableWidgetItem(filename)
        file_item.setToolTip(filename)
        self.dialog.results_table.setItem(row, 0, file_item)
        
        # –°—Ç–∞—Ç—É—Å —Å –∏–∫–æ–Ω–∫–∞–º–∏
        status_text = f"‚úÖ {translations.get_text('success')}" if success else f"‚ùå {translations.get_text('error')}"
        status_item = QTableWidgetItem(status_text)
        
        if success:
            status_item.setBackground(QColor('#d5f4e6'))  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            status_item.setForeground(QColor('#27ae60'))  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
        else:
            status_item.setBackground(QColor('#fadbd8'))  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π
            status_item.setForeground(QColor('#e74c3c'))  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        self.dialog.results_table.setItem(row, 1, status_item)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_item = QTableWidgetItem(message)
        message_item.setToolTip(message)
        self.dialog.results_table.setItem(row, 2, message_item)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
        self.dialog.results_table.scrollToBottom()
    
    def onConversionFinished(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        from ..translations import translations
        from .gui_dialogs import SuccessDialog, WarningDialog, ErrorDialog
        
        self.dialog.progress_bar.setValue(100)
        self.dialog.control_buttons.convert_button.setEnabled(True)
        self.dialog.control_buttons.convert_button.setText(f"üöÄ {translations.get_text('start_conversion')}")
        self.dialog.control_buttons.cancel_button.setEnabled(False)
        self.dialog.log_message(f"üéâ === Conversion completed {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_files = self.dialog.results_table.rowCount()
        success_count = 0
        error_count = 0
        
        for row in range(total_files):
            status_item = self.dialog.results_table.item(row, 1)
            if status_item and '‚úÖ' in status_item.text():
                success_count += 1
            else:
                error_count += 1
        
        self.dialog.log_message(f"üìä Statistics: {success_count} successful, {error_count} errors out of {total_files} files")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.dialog.processing_widget.add_to_project_cb.isChecked() and success_count > 0:
            self.addResultsToProject()
        
        # –û—á–∏—Å—Ç–∫–∞ –≤–æ—Ä–∫–µ—Ä–∞
        if self.dialog.worker_thread:
            self.dialog.worker_thread.quit()
            self.dialog.worker_thread.wait()
            self.dialog.worker_thread = None
            self.dialog.worker = None
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if success_count == total_files:
            dialog = SuccessDialog('–£—Å–ø–µ—Ö', f'All {total_files} files converted successfully!')
            dialog.exec_()
        elif success_count > 0:
            dialog = WarningDialog('–ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö', f'{success_count} files converted successfully, {error_count} failed.')
            dialog.exec_()
        else:
            dialog = ErrorDialog('–û—à–∏–±–∫–∞', 'No files were converted successfully.')
            dialog.exec_()
    
    def onConversionError(self, error_message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
        from ..translations import translations
        from .gui_dialogs import ErrorDialog
        
        self.dialog.log_message(f"üî• CRITICAL ERROR: {error_message}")
        dialog = ErrorDialog(translations.get_text('critical_error'), error_message)
        dialog.exec_()
        self.onConversionFinished()
    
    def addResultsToProject(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç"""
        output_folder = self.dialog.output_widget.output_folder_line.text()
        crs_text = self.dialog.processing_widget.crs_text.toPlainText().strip()
        output_format = 'GeoJSON' if 'GeoJSON' in self.dialog.output_widget.output_format_combo.currentText() else 'ESRI Shapefile'
        
        # –°–æ–∑–¥–∞–Ω–∏–µ CRS –æ–±—ä–µ–∫—Ç–∞
        crs = QgsCoordinateReferenceSystem()
        if crs_text.startswith('EPSG:'):
            epsg_code = int(crs_text.split(':')[1])
            crs.createFromId(epsg_code)
        else:
            crs.createFromString(crs_text)
        
        added_count = 0
        for row in range(self.dialog.results_table.rowCount()):
            status_item = self.dialog.results_table.item(row, 1)
            if status_item and '‚úÖ' in status_item.text():
                filename = self.dialog.results_table.item(row, 0).text()
                
                if output_format == 'GeoJSON':
                    # –î–ª—è GeoJSON —Ñ–∞–π–ª–æ–≤
                    if filename.lower().endswith('.mif'):
                        output_file = os.path.join(output_folder, filename.replace('.mif', '.geojson'))
                        layer_name = filename.replace('.mif', '')
                    else:  # .tab
                        output_file = os.path.join(output_folder, filename.replace('.tab', '.geojson'))
                        layer_name = filename.replace('.tab', '')
                else:
                    # –î–ª—è Shapefile
                    if filename.lower().endswith('.mif'):
                        output_file = os.path.join(output_folder, filename.replace('.mif', '.shp'))
                        layer_name = filename.replace('.mif', '')
                    else:  # .tab
                        output_file = os.path.join(output_folder, filename.replace('.tab', '.shp'))
                        layer_name = filename.replace('.tab', '')
                
                if os.path.exists(output_file):
                    layer = QgsVectorLayer(output_file, layer_name, "ogr")
                    if layer.isValid():
                        layer.setCrs(crs)
                        QgsProject.instance().addMapLayer(layer)
                        added_count += 1
        
        if added_count > 0:
            self.dialog.log_message(f"üìÅ Added to project: {added_count} layers")
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        from ..translations import translations
        from .gui_dialogs import ConfirmationDialog
        
        if (self.dialog.worker and self.dialog.worker_thread and 
            self.dialog.worker_thread.isRunning()):
            
            dialog = ConfirmationDialog(
                translations.get_text('confirmation'), 
                translations.get_text('confirm_close')
            )
            if dialog.exec_() == QMessageBox.Yes:
                self.cancelConversion()
                if self.dialog.worker_thread:
                    self.dialog.worker_thread.quit()
                    self.dialog.worker_thread.wait()
                event.accept()
            else:
                event.ignore()
        else:
            event.accept()
